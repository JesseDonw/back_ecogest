<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\AuthController;
use App\Http\Controllers\MessageController;
use App\Http\Controllers\LocalisationController;
use App\Http\Controllers\ChatController;
use App\Http\Controllers\TaskController;


/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Ici, vous pouvez enregistrer les routes API de votre application. Ces routes
| sont chargÃ©es par le RouteServiceProvider et seront automatiquement prÃ©fixÃ©es
| avec "/api". Assurez-vous de bien configurer les contrÃ´leurs associÃ©s.
|
*/

/* ğŸ”’ Route protÃ©gÃ©e pour rÃ©cupÃ©rer l'utilisateur authentifiÃ© */
Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

/* ==============================
 * ğŸ“Œ AUTHENTIFICATION & INSCRIPTION
 * ============================== */
Route::post('register', [AuthController::class, 'register']);          // âœ… Inscription d'un agent
Route::post('registercli', [AuthController::class, 'registercli']);    // âœ… Inscription d'un client
Route::post('registeradmin', [AuthController::class, 'registeradmin']);// âœ… Inscription d'un admin

Route::post('login', [AuthController::class, 'login']);                // âœ… Connexion d'un agent
Route::post('logincli', [AuthController::class, 'logincli']);          // âœ… Connexion d'un client
Route::post('loginadmin', [AuthController::class, 'loginadmin']);      // âœ… Connexion d'un admin

Route::post('/logout', [AuthController::class, 'logout']);             // âœ… DÃ©connexion


/* ==============================
 * ğŸ“Œ GESTION DES AGENTS, CLIENTS & ADMINS
 * ============================== */
Route::get('/agents', [AuthController::class, 'getAllAgents']);  // âœ… RÃ©cupÃ©rer tous les agents
Route::get('/agent/{id}', [AuthController::class, 'getAgent']);  // âœ… RÃ©cupÃ©rer un agent spÃ©cifique
Route::get('/clients', [AuthController::class, 'getAllClients']); // âœ… RÃ©cupÃ©rer tous les clients
Route::get('/client/{id}', [AuthController::class, 'getClient']);// âœ… RÃ©cupÃ©rer un client spÃ©cifique
Route::get('/admin/{id}', [AuthController::class, 'getAdmin']);  // âœ… RÃ©cupÃ©rer un administrateur spÃ©cifique

Route::put('/agent/{id}', [AuthController::class, 'updateAgent']); // âœ… Mettre Ã  jour un Agent
Route::delete('/agent/{id}', [AuthController::class, 'deleteAgent']); // âœ… Supprimer un agent spÃ©cifique
Route::get('/admins', [AuthController::class, 'getAllAdmin']);
Route::delete('/admin/{id}', [AuthController::class, 'deleteAdmin']); // âœ… Supprimer un agent spÃ©cifique


/* ==============================
 * ğŸ“Œ LOCALISATION DES CLIENTS
 * ============================== */
Route::post('/storelocation', [LocalisationController::class, 'storelocation']); // âœ… Ajouter la localisation d'un client

Route::post('/localisations', [LocalisationController::class, 'storeLocation']); // âœ… Ajouter une localisation
Route::get('/localisations', [LocalisationController::class, 'getAll']);         // âœ… RÃ©cupÃ©rer toutes les localisations
Route::get('/localisations/{id}', [LocalisationController::class, 'getById']);   // âœ… RÃ©cupÃ©rer une localisation spÃ©cifique
Route::put('/localisations/{id}', [LocalisationController::class, 'updateLocation']); // âœ… Mettre Ã  jour une localisation
Route::delete('/localisations/{id}', [LocalisationController::class, 'deleteLocation']); // âœ… Supprimer une localisation



/* ==============================
 * ğŸ“Œ GESTION DES MESSAGES & DISCUSSIONS
 * ============================== */
Route::post('/start-conversation', [ChatController::class, 'startConversation']); // âœ… DÃ©marrer une conversation
Route::post('/send-message', [ChatController::class, 'sendMessage']);             // âœ… Envoyer un message
Route::get('/messages/{conversationId}', [ChatController::class, 'getMessages']); // âœ… RÃ©cupÃ©rer les messages d'une conversation
Route::get('/conversations/{conversationId}/messages', [ChatController::class, 'getMessages']); // RÃ©cupÃ©rer les messages d'une conversation spÃ©cifique


/* ==============================
 * ğŸ“Œ GESTION DES TÃ‚CHES
 * ============================== */
Route::get('/taches', [TaskController::class, 'getAll']);         // âœ… RÃ©cupÃ©rer toutes les tÃ¢ches
Route::post('/taches', [TaskController::class, 'store']);        // âœ… Ajouter une tÃ¢che
Route::get('/taches/{id}', [TaskController::class, 'show']);     // âœ… RÃ©cupÃ©rer une tÃ¢che spÃ©cifique
Route::put('/taches/{id}', [TaskController::class, 'updateTache']);   // âœ… Mettre Ã  jour une tÃ¢che
Route::delete('/taches/{id}', [TaskController::class, 'deleteTache']);// âœ… Supprimer une tÃ¢che
Route::patch('/taches/{id}/statut', [TaskController::class, 'updateStatut']); // âœ… Mettre Ã  jour uniquement le statut d'une tÃ¢che
// RÃ©cupÃ©rer les tÃ¢ches en attente
Route::get('/taches/en-attente', [TaskController::class, 'getPendingTasks']);
Route::get('/taches/statut/{status}', [TaskController::class, 'getTasksByStatus']);  // RÃ©cupÃ©rer les tÃ¢ches par statut
Route::get('/taches/tri/localisation', [TaskController::class, 'getTasksSortedByLocation']);  // Trier les tÃ¢ches par localisation
Route::post('/taches/plus-proche', [TaskController::class, 'getNearestTasks']);  // RÃ©cupÃ©rer les tÃ¢ches proches
Route::put('/taches/{id}/validate', [TaskController::class, 'validateTache']);  // Valider une tÃ¢che
// Route protÃ©gÃ©e par Sanctum pour rÃ©cupÃ©rer les tÃ¢ches accomplies par l'agent
Route::get('/taches/done', [TaskController::class, 'getDoneTasks']);
// Nombre de tache
Route::get('/tasks/count/sorted-by-location', [TaskController::class, 'getTasksCountSortedByLocation']);






Route::middleware('auth:sanctum')->post('/send-message', [MessageController::class, 'sendMessage']);

Route::middleware('auth:sanctum')->get('/fetch-messages', [MessageController::class, 'getMessages']);

Route::middleware('auth:sanctum')->get('/test-auth', function (Request $request) {
    return response()->json(['user' => Auth::user()]);
});



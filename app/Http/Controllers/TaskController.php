<?php

namespace App\Http\Controllers;

use App\Models\Tache;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class TaskController extends Controller
{
    /**
     * ‚úÖ Enregistre une nouvelle t√¢che dans la base de donn√©es avec un statut par d√©faut "en attente".
     */
    public function store(Request $request)
    {
        // üîç Validation des donn√©es entrantes
        $validator = Validator::make($request->all(), [
            'nom_tache' => 'required|string|max:255', // ‚úÖ Nom de la t√¢che obligatoire
            'date_envoie_tache' => 'required|date', // ‚úÖ Date obligatoire
            'localisation_id' => 'required|exists:localisation,id', // V√©rifie que la localisation existe
            'statut' => 'sometimes|string|in:en attente,en cours,termin√©e', // ‚úÖ Optionnel, valeurs autoris√©es
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        // ‚úÖ Cr√©ation de la t√¢che avec "statut" par d√©faut √† "en attente"
        $tache = Tache::create([
            'nom_tache' => $request->nom_tache,
            'date_envoie_tache' => $request->date_envoie_tache,
            'localisation_id' => $request->localisation_id,
            'statut' => $request->statut ?? 'en attente', // ‚úÖ D√©faut "en attente" si non fourni
        ]);

        return response()->json([
            'message' => 'T√¢che enregistr√©e avec succ√®s',
            'tache' => $tache
        ], 201);
    }

    /**
     * ‚úÖ R√©cup√®re toutes les t√¢ches enregistr√©es.
     */
    public function getAll()
    {
        $taches = Tache::with('localisation')->get();

        if ($taches->isEmpty()) {
            return response()->json(['message' => 'Aucune t√¢che trouv√©e'], 404);
        }

        return response()->json($taches, 200);
    }

    /**
     * ‚úÖ R√©cup√®re une t√¢che sp√©cifique par son ID.
     */
    public function getById($id)
    {
        $tache = Tache::with('localisation')->find($id);

        if (!$tache) {
            return response()->json(['message' => 'T√¢che non trouv√©e'], 404);
        }

        return response()->json($tache, 200);
    }

    /**
     * ‚úÖ Met √† jour une t√¢che existante, y compris son statut.
     */
    public function updateTache(Request $request, $id)
    {
        $tache = Tache::find($id);

        if (!$tache) {
            return response()->json(['message' => 'T√¢che non trouv√©e'], 404);
        }

        // üîç Validation des nouvelles donn√©es
        $validator = Validator::make($request->all(), [
            'nom_tache' => 'sometimes|string|max:255',
            'date_envoie_tache' => 'sometimes|date',
            'localisation_id' => 'sometimes|exists:localisation,id',
            'statut' => 'sometimes|string|in:en attente,en cours,termin√©e', // ‚úÖ Statut modifiable
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        // ‚úÖ Mise √† jour des donn√©es
        $tache->update($request->all());

        return response()->json([
            'message' => 'T√¢che mise √† jour avec succ√®s',
            'tache' => $tache
        ], 200);
    }

    /**
     * ‚úÖ Supprime une t√¢che.
     */
    public function deleteTache($id)
    {
        $tache = Tache::find($id);

        if (!$tache) {
            return response()->json(['message' => 'T√¢che non trouv√©e'], 404);
        }

        $tache->delete();

        return response()->json(['message' => 'T√¢che supprim√©e avec succ√®s'], 200);
    }
}

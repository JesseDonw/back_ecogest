<?php

namespace App\Http\Controllers;

use App\Models\Localisation;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class LocalisationController extends Controller
{
    /**
     * ‚úÖ Enregistre une nouvelle localisation dans la base de donn√©es.
     */
    public function storeLocation(Request $request)
    {
        // üîç Validation des donn√©es entrantes
        $validator = Validator::make($request->all(), [
            'location' => 'required|string|max:255', // Ville + Pays
            'latitude' => 'required|numeric',
            'longitude' => 'required|numeric',
            'client_id' => 'required|exists:clients,id', // V√©rifie que le client existe
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        // ‚úÖ Cr√©ation de la localisation
        $localisation = Localisation::create([
            'location' => $request->location,
            'latitude' => $request->latitude,
            'longitude' => $request->longitude,
            'client_id' => $request->client_id,
        ]);

        return response()->json([
            'message' => 'Localisation enregistr√©e avec succ√®s',
            'localisation' => $localisation
        ], 201);
    }

    /**
     * ‚úÖ R√©cup√®re toutes les localisations enregistr√©es.
     */
    public function getAll()
    {
        $localisations = Localisation::all();

        if ($localisations->isEmpty()) {
            return response()->json(['message' => 'Aucune localisation trouv√©e'], 404);
        }

        return response()->json($localisations, 200);
    }

    /**
     * ‚úÖ R√©cup√®re une localisation sp√©cifique par son ID.
     */
    public function getById($id)
    {
        $localisation = Localisation::find($id);

        if (!$localisation) {
            return response()->json(['message' => 'Localisation non trouv√©e'], 404);
        }

        return response()->json($localisation, 200);
    }

    /**
     * ‚úÖ Met √† jour une localisation existante.
     */
    public function updateLocation(Request $request, $id)
    {
        $localisation = Localisation::find($id);

        if (!$localisation) {
            return response()->json(['message' => 'Localisation non trouv√©e'], 404);
        }

        // üîç Validation des nouvelles donn√©es
        $validator = Validator::make($request->all(), [
            'location' => 'sometimes|string|max:255',
            'latitude' => 'sometimes|numeric',
            'longitude' => 'sometimes|numeric',
            'client_id' => 'sometimes|exists:clients,id',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        // ‚úÖ Mise √† jour des donn√©es
        $localisation->update($request->all());

        return response()->json([
            'message' => 'Localisation mise √† jour avec succ√®s',
            'localisation' => $localisation
        ], 200);
    }

    /**
     * ‚úÖ Supprime une localisation.
     */
    public function deleteLocation($id)
    {
        $localisation = Localisation::find($id);

        if (!$localisation) {
            return response()->json(['message' => 'Localisation non trouv√©e'], 404);
        }

        $localisation->delete();

        return response()->json(['message' => 'Localisation supprim√©e avec succ√®s'], 200);
    }
}
